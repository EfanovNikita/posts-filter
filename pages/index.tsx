import type { NextPage } from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { GetStaticProps } from 'next'
import { ChangeEventHandler, FormEvent, useState } from 'react'
import { fetchNewsInstance } from '../axios/index'
import Post from '../components/Post'
import { fetchPosts } from '../redux/postsSlice'
import { postSelector } from '../redux/postsSlice'
import { useAppDispatch, useAppSelector } from '../Hooks/appHooks'
import type { InitialStateType, EntitiesPost, IPost } from '../types/types'

const Home: NextPage = () => {

  const [filterValue, setFilterName] = useState('')
  const [filterType, setFilterType] = useState<'new' | 'event'>('new')
  const [activeForm, setActiveForm] = useState(false)
  const posts = useAppSelector(postSelector.selectEntities)
  const ids = useAppSelector(postSelector.selectIds)
  const loading = useAppSelector(state => state.posts.loading)
  const errorMsg = useAppSelector(state => state.posts.error)
  const dispatch = useAppDispatch()

  // применяем фильтр
  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    dispatch(fetchPosts({ search: filterValue, type: filterType }))
    setActiveForm(!activeForm)
  }
  // контролируем input'ы
  const handleChangeFilter: ChangeEventHandler<HTMLInputElement> = (e) => {
    setFilterName(e.currentTarget.value)
  }
  const handleRadioNEW: ChangeEventHandler<HTMLInputElement> = () => {
    setFilterType('new')
  }
  const handleRadioEVENT: ChangeEventHandler<HTMLInputElement> = () => {
    setFilterType('event')
  }
  const handleActiveBtn = () => {
    setActiveForm(!activeForm)
  }
  const clearForm = () => {
    setFilterType('new')
    setFilterName('')
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Posts</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <button onClick={handleActiveBtn}>Фильтр</button>

      {loading === 'loading' && <div>Loading...</div> }
      {loading === 'idle' && ids.map((key) => <Post post={posts[key]} key={key}/>)}
      {loading === 'failed' && <div>Ooops, something wrong. {errorMsg}</div>}

      <form onSubmit={handleSubmit} className={`${styles.filter} ${activeForm && styles.active}`} >
        <label className={styles.textInput}>
          Фильтр
          <input type='text' name='name' onChange={handleChangeFilter} value={filterValue} />
        </label>
        <label className={styles.radioBtn}>
          Новости
          <input type='radio' checked={filterType === 'new'} onChange={handleRadioNEW} />
        </label>
        <label className={styles.radioBtn}>
          События
          <input type='radio' checked={filterType === 'event'} onChange={handleRadioEVENT} />
        </label>
        <input type='submit' value='Отфильтровать' />
        <button type='button' onClick={clearForm}>Отчистить фильтр</button>
        <button type='button' onClick={handleActiveBtn} >Закрыть</button>
      </form>
    </div>
  )
}

export const getStaticProps: GetStaticProps = async () => {
  const res = await fetchNewsInstance.get('')
  const resData = res.data.data

  let ids: (number | string)[] = []
  let entities: EntitiesPost = {}
  resData.forEach((item: IPost, index: number) => {
    const { title, description } = item
    entities[index] = { title, description, id: index }
    ids.push(index)
  })
  const initialReduxState: InitialStateType = {
    ids,
    entities,
    loading: 'idle',
    error: null
  }
  return {
    props: {
      initialReduxState
    }
  }
}

export default Home
